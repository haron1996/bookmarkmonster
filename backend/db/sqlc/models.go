// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type SignupMode string

const (
	SignupModeEmail    SignupMode = "email"
	SignupModeGoogle   SignupMode = "google"
	SignupModeFacebook SignupMode = "facebook"
	SignupModeGithub   SignupMode = "github"
	SignupModeReddit   SignupMode = "reddit"
)

func (e *SignupMode) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SignupMode(s)
	case string:
		*e = SignupMode(s)
	default:
		return fmt.Errorf("unsupported scan type for SignupMode: %T", src)
	}
	return nil
}

type NullSignupMode struct {
	SignupMode SignupMode `json:"signup_mode"`
	Valid      bool       `json:"valid"` // Valid is true if SignupMode is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSignupMode) Scan(value interface{}) error {
	if value == nil {
		ns.SignupMode, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SignupMode.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSignupMode) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SignupMode), nil
}

type Bookmark struct {
	ID         string             `json:"id"`
	Title      string             `json:"title"`
	Bookmark   string             `json:"bookmark"`
	Host       string             `json:"host"`
	Favicon    pgtype.Text        `json:"favicon"`
	Thumbnail  pgtype.Text        `json:"thumbnail"`
	Notes      pgtype.Text        `json:"notes"`
	UserID     string             `json:"user_id"`
	Added      time.Time          `json:"added"`
	Updated    pgtype.Timestamptz `json:"updated"`
	Deleted    pgtype.Timestamptz `json:"deleted"`
	FolderID   pgtype.Text        `json:"folder_id"`
	Beautified pgtype.Timestamptz `json:"beautified"`
}

type BookmarkScreenshot struct {
	ID                 string             `json:"id"`
	ScreenshotLocation string             `json:"screenshot_location"`
	BookmarkID         string             `json:"bookmark_id"`
	UserID             string             `json:"user_id"`
	Added              time.Time          `json:"added"`
	Deleted            pgtype.Timestamptz `json:"deleted"`
	Fullpage           bool               `json:"fullpage"`
}

type BookmarkTag struct {
	BookmarkID string `json:"bookmark_id"`
	TagID      string `json:"tag_id"`
}

type EmailVerification struct {
	Email        string    `json:"email"`
	Code         string    `json:"code"`
	Expiry       time.Time `json:"expiry"`
	UserPassword string    `json:"user_password"`
}

type Folder struct {
	FolderID          string             `json:"folder_id"`
	UserID            string             `json:"user_id"`
	FolderName        string             `json:"folder_name"`
	Path              string             `json:"path"`
	Label             string             `json:"label"`
	Starred           bool               `json:"starred"`
	CreatedAt         time.Time          `json:"created_at"`
	UpdatedAt         time.Time          `json:"updated_at"`
	SubfolderOf       pgtype.Text        `json:"subfolder_of"`
	DeletedAt         pgtype.Timestamptz `json:"deleted_at"`
	FolderDescription string             `json:"folder_description"`
	FolderPassword    pgtype.Text        `json:"folder_password"`
	Ishidden          bool               `json:"ishidden"`
}

type PocketCode struct {
	UserID string `json:"user_id"`
	Code   string `json:"code"`
}

type PocketToken struct {
	AccessToken string `json:"access_token"`
	Username    string `json:"username"`
	UserID      string `json:"user_id"`
}

type Support struct {
	ID      string    `json:"id"`
	Email   string    `json:"email"`
	Title   string    `json:"title"`
	Comment string    `json:"comment"`
	Created time.Time `json:"created"`
}

type Tag struct {
	ID      string             `json:"id"`
	Name    string             `json:"name"`
	UserID  string             `json:"user_id"`
	Added   time.Time          `json:"added"`
	Updated pgtype.Timestamptz `json:"updated"`
	Deleted pgtype.Timestamptz `json:"deleted"`
}

type Userr struct {
	ID              string             `json:"id"`
	Name            string             `json:"name"`
	Email           string             `json:"email"`
	EmailVerified   bool               `json:"email_verified"`
	Picture         pgtype.Text        `json:"picture"`
	AccountPassword pgtype.Text        `json:"account_password"`
	CreatedAt       time.Time          `json:"created_at"`
	LastLogin       pgtype.Timestamptz `json:"last_login"`
	RefreshToken    pgtype.Text        `json:"refresh_token"`
	Deleted         pgtype.Timestamptz `json:"deleted"`
	SignupMode      SignupMode         `json:"signup_mode"`
}

type Waitlist struct {
	ID          string      `json:"id"`
	Email       string      `json:"email"`
	Name        string      `json:"name"`
	CompanyName pgtype.Text `json:"company_name"`
	Comment     pgtype.Text `json:"comment"`
	Joined      time.Time   `json:"joined"`
}
